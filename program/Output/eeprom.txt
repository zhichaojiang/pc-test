; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\eeprom.o --asm_dir=..\Output\ --list_dir=..\Output\ --depend=..\output\eeprom.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\USER -I..\FWlib\inc -I..\FWlib\src -I..\modbus\include -I..\modbus\port -I..\modbus\rtu -I..\modbus\ascii -I..\modbus\include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -D__UVISION_VERSION=535 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=..\output\eeprom.crf ..\FWlib\src\eeprom.c]
                          THUMB

                          AREA ||i.STMFLASH_ErasePage||, CODE, READONLY, ALIGN=2

                  STMFLASH_ErasePage PROC
;;;43     //返回值:执行情况
;;;44     u8 STMFLASH_ErasePage(u32 paddr)
000000  b510              PUSH     {r4,lr}
;;;45     {
000002  4604              MOV      r4,r0
;;;46     	u8 res=0;
000004  2300              MOVS     r3,#0
;;;47     	res=STMFLASH_WaitDone(0X5FFF);//等待上次操作结束,>20ms    
000006  f64570ff          MOV      r0,#0x5fff
00000a  f7fffffe          BL       STMFLASH_WaitDone
00000e  4603              MOV      r3,r0
;;;48     	if(res==0)
000010  b9c3              CBNZ     r3,|L1.68|
;;;49     	{ 
;;;50     		FLASH->CR|=1<<1;//页擦除
000012  480d              LDR      r0,|L1.72|
000014  6900              LDR      r0,[r0,#0x10]
000016  f0400002          ORR      r0,r0,#2
00001a  490b              LDR      r1,|L1.72|
00001c  6108              STR      r0,[r1,#0x10]
;;;51     		FLASH->AR=paddr;//设置页地址 
00001e  4608              MOV      r0,r1
000020  6144              STR      r4,[r0,#0x14]
;;;52     		FLASH->CR|=1<<6;//开始擦除		  
000022  6900              LDR      r0,[r0,#0x10]
000024  f0400040          ORR      r0,r0,#0x40
000028  6108              STR      r0,[r1,#0x10]
;;;53     		res=STMFLASH_WaitDone(0X5FFF);//等待操作结束,>20ms  
00002a  f64570ff          MOV      r0,#0x5fff
00002e  f7fffffe          BL       STMFLASH_WaitDone
000032  4603              MOV      r3,r0
;;;54     		if(res!=1)//非忙
000034  2b01              CMP      r3,#1
000036  d005              BEQ      |L1.68|
;;;55     		{
;;;56     			FLASH->CR&=~(1<<1);//清除页擦除标志.
000038  4803              LDR      r0,|L1.72|
00003a  6900              LDR      r0,[r0,#0x10]
00003c  f0200002          BIC      r0,r0,#2
000040  4901              LDR      r1,|L1.72|
000042  6108              STR      r0,[r1,#0x10]
                  |L1.68|
;;;57     		}
;;;58     	}
;;;59     	return res;
000044  4618              MOV      r0,r3
;;;60     }
000046  bd10              POP      {r4,pc}
;;;61     //在FLASH指定地址写入半字
                          ENDP

                  |L1.72|
                          DCD      0x40022000

                          AREA ||i.STMFLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  STMFLASH_GetStatus PROC
;;;15     //得到FLASH状态
;;;16     u8 STMFLASH_GetStatus(void)
000000  4809              LDR      r0,|L2.40|
;;;17     {	
;;;18     	u32 res;		
;;;19     	res=FLASH->SR; 
000002  68c1              LDR      r1,[r0,#0xc]
;;;20     	if(res&(1<<0))return 1;		    //忙
000004  f0010001          AND      r0,r1,#1
000008  b108              CBZ      r0,|L2.14|
00000a  2001              MOVS     r0,#1
                  |L2.12|
;;;21     	else if(res&(1<<2))return 2;	//编程错误
;;;22     	else if(res&(1<<4))return 3;	//写保护错误
;;;23     	return 0;						//操作完成
;;;24     }
00000c  4770              BX       lr
                  |L2.14|
00000e  f0010004          AND      r0,r1,#4              ;21
000012  b108              CBZ      r0,|L2.24|
000014  2002              MOVS     r0,#2                 ;21
000016  e7f9              B        |L2.12|
                  |L2.24|
000018  f0010010          AND      r0,r1,#0x10           ;22
00001c  b108              CBZ      r0,|L2.34|
00001e  2003              MOVS     r0,#3                 ;22
000020  e7f4              B        |L2.12|
                  |L2.34|
000022  2000              MOVS     r0,#0                 ;23
000024  e7f2              B        |L2.12|
;;;25     //等待操作完成
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40022000

                          AREA ||i.STMFLASH_Lock||, CODE, READONLY, ALIGN=2

                  STMFLASH_Lock PROC
;;;10     //flash上锁
;;;11     void STMFLASH_Lock(void)
000000  4803              LDR      r0,|L3.16|
;;;12     {
;;;13       FLASH->CR|=1<<7;//上锁
000002  6900              LDR      r0,[r0,#0x10]
000004  f0400080          ORR      r0,r0,#0x80
000008  4901              LDR      r1,|L3.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;14     }
00000c  4770              BX       lr
;;;15     //得到FLASH状态
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40022000

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;161    //NumToWrite:半字(16位)数
;;;162    void STMFLASH_Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead)   	
000000  b530              PUSH     {r4,r5,lr}
;;;163    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;164    	u16 i;
;;;165    	for(i=0;i<NumToRead;i++)
000008  2200              MOVS     r2,#0
00000a  e007              B        |L4.28|
                  |L4.12|
;;;166    	{
;;;167    		pBuffer[i]=STMFLASH_ReadHalfWord(ReadAddr);//读取2个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFLASH_ReadHalfWord
000012  f8240012          STRH     r0,[r4,r2,LSL #1]
;;;168    		ReadAddr+=2;//偏移2个字节.	
000016  1c9b              ADDS     r3,r3,#2
000018  1c50              ADDS     r0,r2,#1              ;165
00001a  b282              UXTH     r2,r0                 ;165
                  |L4.28|
00001c  42aa              CMP      r2,r5                 ;165
00001e  dbf5              BLT      |L4.12|
;;;169    	}
;;;170    }
000020  bd30              POP      {r4,r5,pc}
;;;171    
                          ENDP


                          AREA ||i.STMFLASH_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadHalfWord PROC
;;;83     //返回值:对应数据.
;;;84     u16 STMFLASH_ReadHalfWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return *(vu16*)faddr; 
000002  8808              LDRH     r0,[r1,#0]
;;;87     }
000004  4770              BX       lr
;;;88     #if STM32_FLASH_WREN	//如果使能了写   
                          ENDP


                          AREA ||i.STMFLASH_Unlock||, CODE, READONLY, ALIGN=2

                  STMFLASH_Unlock PROC
;;;4      //解锁STM32的FLASH
;;;5      void STMFLASH_Unlock(void)
000000  4802              LDR      r0,|L6.12|
;;;6      {
;;;7        FLASH->KEYR=FLASH_KEY1;//写入解锁序列.
000002  4903              LDR      r1,|L6.16|
000004  6048              STR      r0,[r1,#4]
;;;8        FLASH->KEYR=FLASH_KEY2;
000006  4803              LDR      r0,|L6.20|
000008  6048              STR      r0,[r1,#4]
;;;9      }
00000a  4770              BX       lr
;;;10     //flash上锁
                          ENDP

                  |L6.12|
                          DCD      0x45670123
                  |L6.16|
                          DCD      0x40022000
                  |L6.20|
                          DCD      0xcdef89ab

                          AREA ||i.STMFLASH_WaitDone||, CODE, READONLY, ALIGN=1

                  STMFLASH_WaitDone PROC
;;;27     //返回值:状态.
;;;28     u8 STMFLASH_WaitDone(u16 time)
000000  b500              PUSH     {lr}
;;;29     {
000002  4602              MOV      r2,r0
;;;30     	u8 res;
;;;31     	do
000004  bf00              NOP      
                  |L7.6|
;;;32     	{
;;;33     		res=STMFLASH_GetStatus();
000006  f7fffffe          BL       STMFLASH_GetStatus
;;;34     		if(res!=1)break;//非忙,无需等待了,直接退出.
00000a  2801              CMP      r0,#1
00000c  d000              BEQ      |L7.16|
00000e  e003              B        |L7.24|
                  |L7.16|
;;;35     		//delay_us(1);
;;;36     		time--;
000010  1e51              SUBS     r1,r2,#1
000012  b28a              UXTH     r2,r1
;;;37     	 }while(time);
000014  2a00              CMP      r2,#0
000016  d1f6              BNE      |L7.6|
                  |L7.24|
000018  bf00              NOP                            ;34
;;;38     	 if(time==0)res=0xff;//TIMEOUT
00001a  b902              CBNZ     r2,|L7.30|
00001c  20ff              MOVS     r0,#0xff
                  |L7.30|
;;;39     	 return res;
;;;40     }
00001e  bd00              POP      {pc}
;;;41     //擦除页
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;111    u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];//最多是2K字节
;;;112    void STMFLASH_Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)	
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;113    {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
;;;114    	u32 secpos;	   //扇区地址
;;;115    	u16 secoff;	   //扇区内偏移地址(16位字计算)
;;;116    	u16 secremain; //扇区内剩余地址(16位字计算)	   
;;;117     	u16 i;    
;;;118    	u32 offaddr;   //去掉0X08000000后的地址
;;;119    	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;//非法地址
00000a  f1b86f00          CMP      r8,#0x8000000
00000e  d302              BCC      |L8.22|
000010  4833              LDR      r0,|L8.224|
000012  4580              CMP      r8,r0
000014  d301              BCC      |L8.26|
                  |L8.22|
;;;120    	STMFLASH_Unlock();						//解锁
;;;121    	offaddr=WriteAddr-STM32_FLASH_BASE;		//实际偏移地址.
;;;122    	secpos=offaddr/STM_SECTOR_SIZE;			//扇区地址  0~127 for STM32F103RBT6
;;;123    	secoff=(offaddr%STM_SECTOR_SIZE)/2;		//在扇区内的偏移(2个字节为基本单位.)
;;;124    	secremain=STM_SECTOR_SIZE/2-secoff;		//扇区剩余空间大小   
;;;125    	if(NumToWrite<=secremain)secremain=NumToWrite;//不大于该扇区范围
;;;126    	while(1) 
;;;127    	{	
;;;128    		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//读出整个扇区的内容
;;;129    		for(i=0;i<secremain;i++)//校验数据
;;;130    		{
;;;131    			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;//需要擦除  	  
;;;132    		}
;;;133    		if(i<secremain)//需要擦除
;;;134    		{
;;;135    			STMFLASH_ErasePage(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);//擦除这个扇区
;;;136    			for(i=0;i<secremain;i++)//复制
;;;137    			{
;;;138    				STMFLASH_BUF[i+secoff]=pBuffer[i];	  
;;;139    			}
;;;140    			STMFLASH_Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//写入整个扇区  
;;;141    		}else STMFLASH_Write_NoCheck(WriteAddr,pBuffer,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
;;;142    		if(NumToWrite==secremain)break;//写入结束了
;;;143    		else//写入未结束
;;;144    		{
;;;145    			secpos++;				//扇区地址增1
;;;146    			secoff=0;				//偏移位置为0 	 
;;;147    		   	pBuffer+=secremain;  	//指针偏移
;;;148    			WriteAddr+=secremain;	//写地址偏移	   
;;;149    		   	NumToWrite-=secremain;	//字节(16位)数递减
;;;150    			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;//下一个扇区还是写不完
;;;151    			else secremain=NumToWrite;//下一个扇区可以写完了
;;;152    		}	 
;;;153    	};	
;;;154    	STMFLASH_Lock();//上锁
;;;155    }
000016  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.26|
00001a  f7fffffe          BL       STMFLASH_Unlock
00001e  f1a86b00          SUB      r11,r8,#0x8000000     ;121
000022  ea4f259b          LSR      r5,r11,#10            ;122
000026  f3cb0948          UBFX     r9,r11,#1,#9          ;123
00002a  f5c97400          RSB      r4,r9,#0x200          ;124
00002e  42a7              CMP      r7,r4                 ;125
000030  dc00              BGT      |L8.52|
000032  463c              MOV      r4,r7                 ;125
                  |L8.52|
000034  e04d              B        |L8.210|
                  |L8.54|
000036  f04f6100          MOV      r1,#0x8000000         ;128
00003a  eb012085          ADD      r0,r1,r5,LSL #10      ;128
00003e  148a              ASRS     r2,r1,#18             ;128
000040  4928              LDR      r1,|L8.228|
000042  f7fffffe          BL       STMFLASH_Read
000046  2600              MOVS     r6,#0                 ;129
000048  e00b              B        |L8.98|
                  |L8.74|
00004a  eb090006          ADD      r0,r9,r6              ;131
00004e  4925              LDR      r1,|L8.228|
000050  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;131
000054  f64f71ff          MOV      r1,#0xffff            ;131
000058  4288              CMP      r0,r1                 ;131
00005a  d000              BEQ      |L8.94|
00005c  e003              B        |L8.102|
                  |L8.94|
00005e  1c70              ADDS     r0,r6,#1              ;129
000060  b286              UXTH     r6,r0                 ;129
                  |L8.98|
000062  42a6              CMP      r6,r4                 ;129
000064  dbf1              BLT      |L8.74|
                  |L8.102|
000066  bf00              NOP                            ;131
000068  42a6              CMP      r6,r4                 ;133
00006a  da1b              BGE      |L8.164|
00006c  f04f6100          MOV      r1,#0x8000000         ;135
000070  eb012085          ADD      r0,r1,r5,LSL #10      ;135
000074  f7fffffe          BL       STMFLASH_ErasePage
000078  2600              MOVS     r6,#0                 ;136
00007a  e008              B        |L8.142|
                  |L8.124|
00007c  f83a0016          LDRH     r0,[r10,r6,LSL #1]    ;138
000080  eb060109          ADD      r1,r6,r9              ;138
000084  4a17              LDR      r2,|L8.228|
000086  f8220011          STRH     r0,[r2,r1,LSL #1]     ;138
00008a  1c70              ADDS     r0,r6,#1              ;136
00008c  b286              UXTH     r6,r0                 ;136
                  |L8.142|
00008e  42a6              CMP      r6,r4                 ;136
000090  dbf4              BLT      |L8.124|
000092  f04f6100          MOV      r1,#0x8000000         ;140
000096  eb012085          ADD      r0,r1,r5,LSL #10      ;140
00009a  148a              ASRS     r2,r1,#18             ;140
00009c  4911              LDR      r1,|L8.228|
00009e  f7fffffe          BL       STMFLASH_Write_NoCheck
0000a2  e004              B        |L8.174|
                  |L8.164|
0000a4  4622              MOV      r2,r4                 ;141
0000a6  4651              MOV      r1,r10                ;141
0000a8  4640              MOV      r0,r8                 ;141
0000aa  f7fffffe          BL       STMFLASH_Write_NoCheck
                  |L8.174|
0000ae  42a7              CMP      r7,r4                 ;142
0000b0  d100              BNE      |L8.180|
0000b2  e00f              B        |L8.212|
                  |L8.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;145
0000b6  f04f0900          MOV      r9,#0                 ;146
0000ba  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;147
0000be  44a0              ADD      r8,r8,r4              ;148
0000c0  1b38              SUBS     r0,r7,r4              ;149
0000c2  b287              UXTH     r7,r0                 ;149
0000c4  f5b77f00          CMP      r7,#0x200             ;150
0000c8  dd02              BLE      |L8.208|
0000ca  f44f7400          MOV      r4,#0x200             ;150
0000ce  e000              B        |L8.210|
                  |L8.208|
0000d0  463c              MOV      r4,r7                 ;151
                  |L8.210|
0000d2  e7b0              B        |L8.54|
                  |L8.212|
0000d4  bf00              NOP                            ;142
0000d6  f7fffffe          BL       STMFLASH_Lock
0000da  bf00              NOP      
0000dc  e79b              B        |L8.22|
;;;156    #endif
                          ENDP

0000de  0000              DCW      0x0000
                  |L8.224|
                          DCD      0x08020000
                  |L8.228|
                          DCD      STMFLASH_BUF

                          AREA ||i.STMFLASH_WriteHalfWord||, CODE, READONLY, ALIGN=2

                  STMFLASH_WriteHalfWord PROC
;;;64     //返回值:写入的情况
;;;65     u8 STMFLASH_WriteHalfWord(u32 faddr, u16 dat)
000000  b530              PUSH     {r4,r5,lr}
;;;66     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;67     	u8 res;	   	    
;;;68     	res=STMFLASH_WaitDone(0XFF);	 
000006  20ff              MOVS     r0,#0xff
000008  f7fffffe          BL       STMFLASH_WaitDone
00000c  4603              MOV      r3,r0
;;;69     	if(res==0)//OK
00000e  b993              CBNZ     r3,|L9.54|
;;;70     	{
;;;71     		FLASH->CR|=1<<0;//编程使能
000010  480a              LDR      r0,|L9.60|
000012  6900              LDR      r0,[r0,#0x10]
000014  f0400001          ORR      r0,r0,#1
000018  4908              LDR      r1,|L9.60|
00001a  6108              STR      r0,[r1,#0x10]
;;;72     		*(vu16*)faddr=dat;//写入数据
00001c  8025              STRH     r5,[r4,#0]
;;;73     		res=STMFLASH_WaitDone(0XFF);//等待操作完成
00001e  20ff              MOVS     r0,#0xff
000020  f7fffffe          BL       STMFLASH_WaitDone
000024  4603              MOV      r3,r0
;;;74     		if(res!=1)//操作成功
000026  2b01              CMP      r3,#1
000028  d005              BEQ      |L9.54|
;;;75     		{
;;;76     			FLASH->CR&=~(1<<0);//清除PG位.
00002a  4804              LDR      r0,|L9.60|
00002c  6900              LDR      r0,[r0,#0x10]
00002e  f0200001          BIC      r0,r0,#1
000032  4902              LDR      r1,|L9.60|
000034  6108              STR      r0,[r1,#0x10]
                  |L9.54|
;;;77     		}
;;;78     	} 
;;;79     	return res;
000036  4618              MOV      r0,r3
;;;80     } 
000038  bd30              POP      {r4,r5,pc}
;;;81     //读取指定地址的半字(16位数据) 
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      0x40022000

                          AREA ||i.STMFLASH_Write_NoCheck||, CODE, READONLY, ALIGN=1

                  STMFLASH_Write_NoCheck PROC
;;;92     //NumToWrite:半字(16位)数   
;;;93     void STMFLASH_Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)   
000000  b5f0              PUSH     {r4-r7,lr}
;;;94     { 			 		 
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;95     	u16 i;
;;;96     	for(i=0;i<NumToWrite;i++)
000008  2400              MOVS     r4,#0
00000a  e007              B        |L10.28|
                  |L10.12|
;;;97     	{
;;;98     		STMFLASH_WriteHalfWord(WriteAddr,pBuffer[i]);
00000c  f8361014          LDRH     r1,[r6,r4,LSL #1]
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       STMFLASH_WriteHalfWord
;;;99     	    WriteAddr+=2;//地址增加2.
000016  1cad              ADDS     r5,r5,#2
000018  1c60              ADDS     r0,r4,#1              ;96
00001a  b284              UXTH     r4,r0                 ;96
                  |L10.28|
00001c  42bc              CMP      r4,r7                 ;96
00001e  dbf5              BLT      |L10.12|
;;;100    	}  
;;;101    } 
000020  bdf0              POP      {r4-r7,pc}
;;;102    //从指定地址开始写入指定长度的数据
                          ENDP


                          AREA ||i.Test_Write||, CODE, READONLY, ALIGN=1

                  Test_Write PROC
;;;174    //WriteData:要写入的数据
;;;175    void Test_Write(u32 WriteAddr,u16 WriteData)   	
000000  b513              PUSH     {r0,r1,r4,lr}
;;;176    {
000002  4604              MOV      r4,r0
;;;177    	STMFLASH_Write(WriteAddr,&WriteData,1);//写入一个字 
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       STMFLASH_Write
;;;178    }
00000e  bd1c              POP      {r2-r4,pc}
;;;179    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  STMFLASH_BUF
                          %        1024
