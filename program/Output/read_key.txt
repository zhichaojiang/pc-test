; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\read_key.o --asm_dir=..\Output\ --list_dir=..\Output\ --depend=..\output\read_key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\USER -I..\FWlib\inc -I..\FWlib\src -I..\modbus\include -I..\modbus\port -I..\modbus\rtu -I..\modbus\ascii -I..\modbus\include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -D__UVISION_VERSION=535 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=..\output\read_key.crf read_key.c]
                          THUMB

                          AREA ||i.KEY_INPUT_GPIO_Config||, CODE, READONLY, ALIGN=2

                  KEY_INPUT_GPIO_Config PROC
;;;16     *********************************************************************************/
;;;17     void KEY_INPUT_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;18     {
;;;19     	GPIO_InitTypeDef GPIO_InitStructure;
;;;20     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;21     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
00000a  2048              MOVS     r0,#0x48
00000c  f88d0003          STRB     r0,[sp,#3]
;;;22     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000010  2001              MOVS     r0,#1
000012  f88d0002          STRB     r0,[sp,#2]
;;;23     	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_0;
000016  f8ad0000          STRH     r0,[sp,#0]
;;;24     	GPIO_Init(GPIOB,&GPIO_InitStructure);
00001a  4669              MOV      r1,sp
00001c  480e              LDR      r0,|L1.88|
00001e  f7fffffe          BL       GPIO_Init
;;;25         GPIO_SetBits(GPIOB,  GPIO_Pin_0);	
000022  2101              MOVS     r1,#1
000024  480c              LDR      r0,|L1.88|
000026  f7fffffe          BL       GPIO_SetBits
;;;26     	
;;;27     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
00002a  2101              MOVS     r1,#1
00002c  2004              MOVS     r0,#4
00002e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;28     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000032  2048              MOVS     r0,#0x48
000034  f88d0003          STRB     r0,[sp,#3]
;;;29     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000038  2001              MOVS     r0,#1
00003a  f88d0002          STRB     r0,[sp,#2]
;;;30     	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_7;
00003e  2080              MOVS     r0,#0x80
000040  f8ad0000          STRH     r0,[sp,#0]
;;;31     	GPIO_Init(GPIOA,&GPIO_InitStructure);
000044  4669              MOV      r1,sp
000046  4805              LDR      r0,|L1.92|
000048  f7fffffe          BL       GPIO_Init
;;;32         GPIO_SetBits(GPIOA,  GPIO_Pin_7);	
00004c  2180              MOVS     r1,#0x80
00004e  4803              LDR      r0,|L1.92|
000050  f7fffffe          BL       GPIO_SetBits
;;;33     
;;;34     }
000054  bd08              POP      {r3,pc}
;;;35     
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      0x40010c00
                  |L1.92|
                          DCD      0x40010800

                          AREA ||i.KeyScan||, CODE, READONLY, ALIGN=2

                  KeyScan PROC
;;;44     *********************************************************************************/
;;;45     void KeyScan(void)
000000  b570              PUSH     {r4-r6,lr}
;;;46     {
;;;47     	static unsigned char LasetReadKey=0;//记录上次KeyScan()读取的键值
;;;48     	uint8_t CurrReadKey;//记录本次KeyScan()读取的键值
;;;49     	uint8_t CurrKey;//记录本次消抖处理后的有效按键值
;;;50     	uint8_t i;
;;;51     	
;;;52     	CurrReadKey=(CurrReadKey<<1)|(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_7)&0X01);
000002  2180              MOVS     r1,#0x80
000004  4842              LDR      r0,|L2.272|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  f365005f          BFI      r0,r5,#1,#31
00000e  b2c5              UXTB     r5,r0
;;;53     	CurrReadKey=(CurrReadKey<<1)|(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)&0X01);
000010  2101              MOVS     r1,#1
000012  4840              LDR      r0,|L2.276|
000014  f7fffffe          BL       GPIO_ReadInputDataBit
000018  f365005f          BFI      r0,r5,#1,#31
00001c  b2c5              UXTB     r5,r0
;;;54     	CurrReadKey=~CurrReadKey;
00001e  43e8              MVNS     r0,r5
000020  b2c5              UXTB     r5,r0
;;;55     
;;;56     	CurrKey=(CurrReadKey&LasetReadKey)|(LastKey&(CurrReadKey^LasetReadKey));
000022  493d              LDR      r1,|L2.280|
000024  7809              LDRB     r1,[r1,#0]  ; LasetReadKey
000026  ea050001          AND      r0,r5,r1
00002a  4a3b              LDR      r2,|L2.280|
00002c  7812              LDRB     r2,[r2,#0]  ; LasetReadKey
00002e  ea850102          EOR      r1,r5,r2
000032  4a3a              LDR      r2,|L2.284|
000034  7812              LDRB     r2,[r2,#0]  ; LastKey
000036  4011              ANDS     r1,r1,r2
000038  ea400601          ORR      r6,r0,r1
;;;57     	KeyPressDown=(~LastKey)&CurrKey;
00003c  4837              LDR      r0,|L2.284|
00003e  7800              LDRB     r0,[r0,#0]  ; LastKey
000040  ea260000          BIC      r0,r6,r0
000044  4936              LDR      r1,|L2.288|
000046  7008              STRB     r0,[r1,#0]
;;;58     	KeyRelease=LastKey&(~CurrKey);
000048  4834              LDR      r0,|L2.284|
00004a  7800              LDRB     r0,[r0,#0]  ; LastKey
00004c  43b0              BICS     r0,r0,r6
00004e  4935              LDR      r1,|L2.292|
000050  7008              STRB     r0,[r1,#0]
;;;59     	LasetReadKey=CurrReadKey; 
000052  4831              LDR      r0,|L2.280|
000054  7005              STRB     r5,[r0,#0]
;;;60     	LastKey=CurrKey;
000056  4831              LDR      r0,|L2.284|
000058  7006              STRB     r6,[r0,#0]
;;;61     	
;;;62     	for(i=0;i<KEY_TOTAL;i++){		
00005a  2400              MOVS     r4,#0
00005c  e055              B        |L2.266|
                  |L2.94|
;;;63     		//短按，弹起来判断
;;;64     		if((KeyRelease&(1<<i))&&(KeyDownTime[i]<LONGPRESSTIEMS)){
00005e  2001              MOVS     r0,#1
000060  40a0              LSLS     r0,r0,r4
000062  4930              LDR      r1,|L2.292|
000064  7809              LDRB     r1,[r1,#0]  ; KeyRelease
000066  4008              ANDS     r0,r0,r1
000068  b160              CBZ      r0,|L2.132|
00006a  482f              LDR      r0,|L2.296|
00006c  f8300014          LDRH     r0,[r0,r4,LSL #1]
000070  2864              CMP      r0,#0x64
000072  da07              BGE      |L2.132|
;;;65     			KeyShortPress|=(1<<i);
000074  2001              MOVS     r0,#1
000076  40a0              LSLS     r0,r0,r4
000078  492c              LDR      r1,|L2.300|
00007a  7809              LDRB     r1,[r1,#0]  ; KeyShortPress
00007c  4308              ORRS     r0,r0,r1
00007e  492b              LDR      r1,|L2.300|
000080  7008              STRB     r0,[r1,#0]
000082  e006              B        |L2.146|
                  |L2.132|
;;;66     
;;;67     		}else{
;;;68     			KeyShortPress&=~(1<<i);
000084  2001              MOVS     r0,#1
000086  40a0              LSLS     r0,r0,r4
000088  4928              LDR      r1,|L2.300|
00008a  7809              LDRB     r1,[r1,#0]  ; KeyShortPress
00008c  4381              BICS     r1,r1,r0
00008e  4827              LDR      r0,|L2.300|
000090  7001              STRB     r1,[r0,#0]
                  |L2.146|
;;;69     		}	
;;;70         
;;;71     		//长按,时间到判断
;;;72     		if(KeyDownTime[i]==LONGPRESSTIEMS){
000092  4825              LDR      r0,|L2.296|
000094  f8300014          LDRH     r0,[r0,r4,LSL #1]
000098  2864              CMP      r0,#0x64
00009a  d107              BNE      |L2.172|
;;;73     			KeyLongPress|=(1<<i);
00009c  2001              MOVS     r0,#1
00009e  40a0              LSLS     r0,r0,r4
0000a0  4923              LDR      r1,|L2.304|
0000a2  7809              LDRB     r1,[r1,#0]  ; KeyLongPress
0000a4  4308              ORRS     r0,r0,r1
0000a6  4922              LDR      r1,|L2.304|
0000a8  7008              STRB     r0,[r1,#0]
0000aa  e006              B        |L2.186|
                  |L2.172|
;;;74     		}else{
;;;75     			KeyLongPress&=~(1<<i);
0000ac  2001              MOVS     r0,#1
0000ae  40a0              LSLS     r0,r0,r4
0000b0  491f              LDR      r1,|L2.304|
0000b2  7809              LDRB     r1,[r1,#0]  ; KeyLongPress
0000b4  4381              BICS     r1,r1,r0
0000b6  481e              LDR      r0,|L2.304|
0000b8  7001              STRB     r1,[r0,#0]
                  |L2.186|
;;;76     		}	
;;;77     		
;;;78     		//长按保持,时间到判断
;;;79     		if(KeyDownTime[i]>LONGPRESSTIEMS){
0000ba  481b              LDR      r0,|L2.296|
0000bc  f8300014          LDRH     r0,[r0,r4,LSL #1]
0000c0  2864              CMP      r0,#0x64
0000c2  dd07              BLE      |L2.212|
;;;80     			KeyLongPressHold|=(1<<i);
0000c4  2001              MOVS     r0,#1
0000c6  40a0              LSLS     r0,r0,r4
0000c8  491a              LDR      r1,|L2.308|
0000ca  7809              LDRB     r1,[r1,#0]  ; KeyLongPressHold
0000cc  4308              ORRS     r0,r0,r1
0000ce  4919              LDR      r1,|L2.308|
0000d0  7008              STRB     r0,[r1,#0]
0000d2  e006              B        |L2.226|
                  |L2.212|
;;;81     		}else{
;;;82     			KeyLongPressHold&=~(1<<i);
0000d4  2001              MOVS     r0,#1
0000d6  40a0              LSLS     r0,r0,r4
0000d8  4916              LDR      r1,|L2.308|
0000da  7809              LDRB     r1,[r1,#0]  ; KeyLongPressHold
0000dc  4381              BICS     r1,r1,r0
0000de  4815              LDR      r0,|L2.308|
0000e0  7001              STRB     r1,[r0,#0]
                  |L2.226|
;;;83     		}	
;;;84     		//键按下时，累加计数器
;;;85     		if(LastKey&(1<<i)){
0000e2  2001              MOVS     r0,#1
0000e4  40a0              LSLS     r0,r0,r4
0000e6  490d              LDR      r1,|L2.284|
0000e8  7809              LDRB     r1,[r1,#0]  ; LastKey
0000ea  4008              ANDS     r0,r0,r1
0000ec  b138              CBZ      r0,|L2.254|
;;;86     			KeyDownTime[i]++;			
0000ee  480e              LDR      r0,|L2.296|
0000f0  f8300014          LDRH     r0,[r0,r4,LSL #1]
0000f4  1c40              ADDS     r0,r0,#1
0000f6  490c              LDR      r1,|L2.296|
0000f8  f8210014          STRH     r0,[r1,r4,LSL #1]
0000fc  e003              B        |L2.262|
                  |L2.254|
;;;87     		}else{
;;;88     			KeyDownTime[i]=0;
0000fe  2000              MOVS     r0,#0
000100  4909              LDR      r1,|L2.296|
000102  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L2.262|
000106  1c60              ADDS     r0,r4,#1              ;62
000108  b2c4              UXTB     r4,r0                 ;62
                  |L2.266|
00010a  2c02              CMP      r4,#2                 ;62
00010c  dba7              BLT      |L2.94|
;;;89     		}
;;;90     		
;;;91     	}	
;;;92     }
00010e  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L2.272|
                          DCD      0x40010800
                  |L2.276|
                          DCD      0x40010c00
                  |L2.280|
                          DCD      LasetReadKey
                  |L2.284|
                          DCD      LastKey
                  |L2.288|
                          DCD      KeyPressDown
                  |L2.292|
                          DCD      KeyRelease
                  |L2.296|
                          DCD      KeyDownTime
                  |L2.300|
                          DCD      KeyShortPress
                  |L2.304|
                          DCD      KeyLongPress
                  |L2.308|
                          DCD      KeyLongPressHold

                          AREA ||.data||, DATA, ALIGN=1

                  KeyPressDown
000000  00                DCB      0x00
                  KeyRelease
000001  00                DCB      0x00
                  LastKey
000002  00                DCB      0x00
                  KeyShortPress
000003  00                DCB      0x00
                  KeyLongPress
000004  00                DCB      0x00
                  KeyLongPressHold
000005  00                DCB      0x00
                  KeyDownTime
000006  0000              DCB      0x00,0x00
000008  0000              DCB      0x00,0x00
                  LasetReadKey
00000a  00                DCB      0x00
