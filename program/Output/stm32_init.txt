; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32_init.o --asm_dir=..\Output\ --list_dir=..\Output\ --depend=..\output\stm32_init.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\USER -I..\FWlib\inc -I..\FWlib\src -I..\modbus\include -I..\modbus\port -I..\modbus\rtu -I..\modbus\ascii -I..\modbus\include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -D__UVISION_VERSION=535 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=..\output\stm32_init.crf ..\FWlib\src\STM32_Init.c]
                          THUMB

                          AREA ||i.stm32_GetPCLK1||, CODE, READONLY, ALIGN=2

                  stm32_GetPCLK1 PROC
;;;5598    *----------------------------------------------------------------------------*/
;;;5599   unsigned int stm32_GetPCLK1 (void) {
000000  4800              LDR      r0,|L1.4|
;;;5600     return ((unsigned int)__PCLK1);
;;;5601   }
000002  4770              BX       lr
;;;5602   
                          ENDP

                  |L1.4|
                          DCD      0x02255100

                          AREA ||i.stm32_GetPCLK2||, CODE, READONLY, ALIGN=2

                  stm32_GetPCLK2 PROC
;;;5607    *----------------------------------------------------------------------------*/
;;;5608   unsigned int stm32_GetPCLK2 (void) {
000000  4800              LDR      r0,|L2.4|
;;;5609     return ((unsigned int)__PCLK2);
;;;5610   }
000002  4770              BX       lr
                          ENDP

                  |L2.4|
                          DCD      0x044aa200

                          AREA ||i.stm32_Init||, CODE, READONLY, ALIGN=2

                  stm32_Init PROC
;;;5541    *----------------------------------------------------------------------------*/
;;;5542   void stm32_Init () {
000000  b510              PUSH     {r4,lr}
;;;5543   
;;;5544   #if __EFI_SETUP
;;;5545     stm32_EfiSetup ();
000002  bf00              NOP      
000004  2012              MOVS     r0,#0x12
000006  4919              LDR      r1,|L3.108|
000008  6008              STR      r0,[r1,#0]
00000a  bf00              NOP      
;;;5546   #endif
;;;5547   
;;;5548   #if __CLOCK_SETUP
;;;5549     stm32_ClockSetup ();
00000c  bf00              NOP      
00000e  4818              LDR      r0,|L3.112|
000010  4918              LDR      r1,|L3.116|
000012  6048              STR      r0,[r1,#4]
000014  4818              LDR      r0,|L3.120|
000016  6008              STR      r0,[r1,#0]
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L3.28|
00001c  4815              LDR      r0,|L3.116|
00001e  6800              LDR      r0,[r0,#0]
000020  f4003000          AND      r0,r0,#0x20000
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L3.28|
000028  bf00              NOP      
                  |L3.42|
00002a  4812              LDR      r0,|L3.116|
00002c  6800              LDR      r0,[r0,#0]
00002e  f0007000          AND      r0,r0,#0x2000000
000032  2800              CMP      r0,#0
000034  d0f9              BEQ      |L3.42|
000036  bf00              NOP      
                  |L3.56|
000038  480e              LDR      r0,|L3.116|
00003a  6840              LDR      r0,[r0,#4]
00003c  f000000c          AND      r0,r0,#0xc
000040  2808              CMP      r0,#8
000042  d1f9              BNE      |L3.56|
000044  bf00              NOP      
;;;5550   #endif
;;;5551   
;;;5552   #if __NVIC_SETUP
;;;5553     stm32_NvicSetup ();
;;;5554   #endif
;;;5555   
;;;5556   #if __SYSTICK_SETUP
;;;5557     stm32_SysTickSetup ();
;;;5558   #endif
;;;5559   
;;;5560   #if __RTC_SETUP
;;;5561     stm32_RtcSetup ();
;;;5562   #endif
;;;5563   
;;;5564   #if __TIMER_SETUP
;;;5565     stm32_TimerSetup ();
;;;5566   #endif
;;;5567   
;;;5568   #if __AFREMAP_SETUP
;;;5569     stm32_AfRemapSetup ();
;;;5570   #endif
;;;5571   
;;;5572   #if __GPIO_SETUP
;;;5573     stm32_GpioSetup ();
000046  bf00              NOP      
000048  480a              LDR      r0,|L3.116|
00004a  6980              LDR      r0,[r0,#0x18]
00004c  f0400008          ORR      r0,r0,#8
000050  4908              LDR      r1,|L3.116|
000052  6188              STR      r0,[r1,#0x18]
000054  2000              MOVS     r0,#0
000056  4909              LDR      r1,|L3.124|
000058  6008              STR      r0,[r1,#0]
00005a  f04f3033          MOV      r0,#0x33333333
00005e  1d09              ADDS     r1,r1,#4
000060  6008              STR      r0,[r1,#0]
000062  bf00              NOP      
;;;5574   #endif
;;;5575   
;;;5576   #if __USART_SETUP
;;;5577     stm32_UsartSetup();
000064  f7fffffe          BL       stm32_UsartSetup
;;;5578   #endif
;;;5579   
;;;5580   #if __EXTI_SETUP
;;;5581     stm32_ExtiSetup();
;;;5582   #endif
;;;5583   
;;;5584   #if __TAMPER_SETUP
;;;5585     stm32_TamperSetup();
;;;5586   #endif
;;;5587   
;;;5588   #if __IWDG_SETUP
;;;5589     stm32_IwdgSetup();   // this should be the last function. watchdog is running afterwards
;;;5590   #endif
;;;5591   
;;;5592   } // end of stm32_Init
000068  bd10              POP      {r4,pc}
;;;5593   
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      0x40022000
                  |L3.112|
                          DCD      0x001d8402
                  |L3.116|
                          DCD      0x40021000
                  |L3.120|
                          DCD      0x01010082
                  |L3.124|
                          DCD      0x40010c00

                          AREA ||i.stm32_UsartSetup||, CODE, READONLY, ALIGN=2

                  stm32_UsartSetup PROC
;;;4999    *----------------------------------------------------------------------------*/
;;;5000   __inline static void stm32_UsartSetup (void) {
000000  4823              LDR      r0,|L4.144|
;;;5001                                                       
;;;5002     if (__USART_USED & 0x01) {                                // USART1 used
;;;5003   
;;;5004       RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
;;;5005       AFIO->MAPR   &= ~(1 << 2);                              // clear USART1 remap
;;;5006       if      ((__USART1_REMAP & 0x04) == 0x00) {             // USART1 no remap
;;;5007         RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;                   // enable clock for GPIOA
;;;5008         GPIOA->CRH   &= ~(0xFFUL  << 4);                      // Clear PA9, PA10
;;;5009         GPIOA->CRH   |=  (0x0BUL  << 4);                      // USART1 Tx (PA9)  alternate output push-pull
;;;5010         GPIOA->CRH   |=  (0x04UL  << 8);                      // USART1 Rx (PA10) input floating
;;;5011       }
;;;5012       else {                                                  // USART1    remap
;;;5013         RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                   // enable clock for Alternate Function
;;;5014         AFIO->MAPR   |= __USART1_REMAP;                       // set   USART1 remap
;;;5015         RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;                   // enable clock for GPIOB
;;;5016         GPIOB->CRL   &= ~(0xFFUL  << 24);                     // Clear PB6, PB7
;;;5017         GPIOB->CRL   |=  (0x0BUL  << 24);                     // USART1 Tx (PB6)  alternate output push-pull
;;;5018         GPIOB->CRL   |=  (0x04UL  << 28);                     // USART1 Rx (PB7) input floating
;;;5019       }
;;;5020   
;;;5021       RCC->APB2ENR |= RCC_APB2ENR_USART1EN;                   // enable clock for USART1
;;;5022           
;;;5023       USART1->BRR  = __USART_BRR(__PCLK2, __USART1_BAUDRATE); // set baudrate
;;;5024       USART1->CR1  = __USART1_DATABITS;                       // set Data bits
;;;5025       USART1->CR2  = __USART1_STOPBITS;                       // set Stop bits
;;;5026       USART1->CR1 |= __USART1_PARITY;                         // set Parity
;;;5027       USART1->CR3  = __USART1_FLOWCTRL;                       // Set Flow Control
;;;5028   
;;;5029       USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);           // RX, TX enable
;;;5030   
;;;5031       if (__USART_INTERRUPTS & 0x01) {                        // interrupts used
;;;5032         USART1->CR1 |= __USART1_CR1;
;;;5033         USART1->CR2 |= __USART1_CR2;
;;;5034         USART1->CR3 |= __USART1_CR3;
;;;5035         NVIC->ISER[1]  = (1 << (USART1_IRQn & 0x1F));   // enable interrupt
;;;5036       }
;;;5037   
;;;5038       USART1->CR1 |= USART_CR1_UE;                            // USART enable
;;;5039     } // end USART1 used
;;;5040   
;;;5041     if (__USART_USED & 0x02) {                                // USART2 used
;;;5042   
;;;5043       RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
000002  6980              LDR      r0,[r0,#0x18]
000004  f0400001          ORR      r0,r0,#1
000008  4921              LDR      r1,|L4.144|
00000a  6188              STR      r0,[r1,#0x18]
;;;5044       AFIO->MAPR   &= ~(1 << 3);                              // clear USART2 remap
00000c  4821              LDR      r0,|L4.148|
00000e  6840              LDR      r0,[r0,#4]
000010  f0200008          BIC      r0,r0,#8
000014  491f              LDR      r1,|L4.148|
000016  6048              STR      r0,[r1,#4]
;;;5045       if      ((__USART2_REMAP & 0x08) == 0x00) {             // USART2 no remap
;;;5046         RCC->APB2ENR |=  RCC_APB2ENR_IOPAEN;                  // enable clock for GPIOA
000018  481d              LDR      r0,|L4.144|
00001a  6980              LDR      r0,[r0,#0x18]
00001c  f0400004          ORR      r0,r0,#4
000020  491b              LDR      r1,|L4.144|
000022  6188              STR      r0,[r1,#0x18]
;;;5047         GPIOA->CRL   &= ~(0xFFUL  << 8);                      // Clear PA2, PA3
000024  481c              LDR      r0,|L4.152|
000026  6800              LDR      r0,[r0,#0]
000028  f420407f          BIC      r0,r0,#0xff00
00002c  491a              LDR      r1,|L4.152|
00002e  6008              STR      r0,[r1,#0]
;;;5048         GPIOA->CRL   |=  (0x0BUL  << 8);                      // USART2 Tx (PA2)  alternate output push-pull
000030  4608              MOV      r0,r1
000032  6800              LDR      r0,[r0,#0]
000034  f4406030          ORR      r0,r0,#0xb00
000038  6008              STR      r0,[r1,#0]
;;;5049         GPIOA->CRL   |=  (0x04UL  << 12);                     // USART2 Rx (PA3)  input floating
00003a  4608              MOV      r0,r1
00003c  6800              LDR      r0,[r0,#0]
00003e  f4404080          ORR      r0,r0,#0x4000
000042  6008              STR      r0,[r1,#0]
;;;5050         if (__USART2_FLOWCTRL & 0x0300) {                     // HW flow control enabled
;;;5051           GPIOA->CRL   &= ~(0xFFUL  << 0);                    // Clear PA0, PA1
;;;5052           GPIOA->CRL   |=  (0x04UL  << 0);                    // USART2 CTS (PA0) input floating
;;;5053           GPIOA->CRL   |=  (0x0BUL  << 4);                    // USART2 RTS (PA1) alternate output push-pull
;;;5054         }
;;;5055       }                                                
;;;5056       else {                                                  // USART2    remap
;;;5057         RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                   // enable clock for Alternate Function
;;;5058         AFIO->MAPR   |= __USART2_REMAP;                       // set   USART2 remap
;;;5059         RCC->APB2ENR |=  RCC_APB2ENR_IOPDEN;                  // enable clock for GPIOD
;;;5060         GPIOD->CRL   &= ~(0xFFUL  << 20);                     // Clear PD5, PD6
;;;5061         GPIOD->CRL   |=  (0x0BUL  << 20);                     // USART2 Tx (PD5)  alternate output push-pull
;;;5062         GPIOD->CRL   |=  (0x04UL  << 24);                     // USART2 Rx (PD6)  input floating
;;;5063         if (__USART2_FLOWCTRL & 0x0300) {                     // HW flow control enabled
;;;5064           GPIOD->CRL   &= ~(0xFFUL  << 12);                   // Clear PD3, PD4
;;;5065           GPIOD->CRL   |=  (0x04UL  << 12);                   // USART2 CTS (PD3) input floating
;;;5066           GPIOD->CRL   |=  (0x0BUL  << 16);                   // USART2 RTS (PD4) alternate output push-pull
;;;5067         }
;;;5068       }
;;;5069   
;;;5070       RCC->APB1ENR |= RCC_APB1ENR_USART2EN;                   // enable clock for USART2
000044  4812              LDR      r0,|L4.144|
000046  69c0              LDR      r0,[r0,#0x1c]
000048  f4403000          ORR      r0,r0,#0x20000
00004c  4910              LDR      r1,|L4.144|
00004e  61c8              STR      r0,[r1,#0x1c]
;;;5071   
;;;5072       USART2->BRR  = __USART_BRR(__PCLK1, __USART2_BAUDRATE); // set baudrate
000050  f44f709c          MOV      r0,#0x138
000054  4911              LDR      r1,|L4.156|
000056  8008              STRH     r0,[r1,#0]
;;;5073       USART2->CR1  = __USART2_DATABITS;                       // set Data bits
000058  2000              MOVS     r0,#0
00005a  1d09              ADDS     r1,r1,#4
00005c  8008              STRH     r0,[r1,#0]
;;;5074       USART2->CR2  = __USART2_STOPBITS;                       // set Stop bits
00005e  1d09              ADDS     r1,r1,#4
000060  8008              STRH     r0,[r1,#0]
;;;5075       USART2->CR1 |= __USART2_PARITY;                         // set Parity
000062  1f08              SUBS     r0,r1,#4
000064  8800              LDRH     r0,[r0,#0]
000066  1f09              SUBS     r1,r1,#4
000068  8008              STRH     r0,[r1,#0]
;;;5076       USART2->CR3  = __USART2_FLOWCTRL;                       // Set Flow Control
00006a  2000              MOVS     r0,#0
00006c  490b              LDR      r1,|L4.156|
00006e  310c              ADDS     r1,r1,#0xc
000070  8008              STRH     r0,[r1,#0]
;;;5077   
;;;5078       USART2->CR1 |= (USART_CR1_RE | USART_CR1_TE);           // RX, TX enable
000072  480a              LDR      r0,|L4.156|
000074  1d00              ADDS     r0,r0,#4
000076  8800              LDRH     r0,[r0,#0]
000078  f040000c          ORR      r0,r0,#0xc
00007c  4907              LDR      r1,|L4.156|
00007e  1d09              ADDS     r1,r1,#4
000080  8008              STRH     r0,[r1,#0]
;;;5079   
;;;5080       if (__USART_INTERRUPTS & 0x02) {                        // interrupts used
;;;5081         USART2->CR1 |= __USART2_CR1;
;;;5082         USART2->CR2 |= __USART2_CR2;
;;;5083         USART2->CR3 |= __USART2_CR3;
;;;5084         NVIC->ISER[1]  = (1 << (USART2_IRQn & 0x1F));   // enable interrupt
;;;5085       }
;;;5086   
;;;5087       USART2->CR1 |= USART_CR1_UE;                            // USART enable
000082  4608              MOV      r0,r1
000084  8800              LDRH     r0,[r0,#0]
000086  f4405000          ORR      r0,r0,#0x2000
00008a  8008              STRH     r0,[r1,#0]
;;;5088     } // end USART2 used
;;;5089   
;;;5090     if (__USART_USED & 0x04) {                                // USART3 used
;;;5091   
;;;5092       RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
;;;5093       AFIO->MAPR   &= ~(3 << 4);                              // clear USART3 remap
;;;5094       if      ((__USART3_REMAP & 0x30) == 0x00) {             // USART3 no remap
;;;5095         RCC->APB2ENR |=  RCC_APB2ENR_IOPBEN;                  // enable clock for GPIOB
;;;5096         GPIOB->CRH   &= ~(0xFFUL  <<  8);                     // Clear PB10, PB11
;;;5097         GPIOB->CRH   |=  (0x0BUL  <<  8);                     // USART3 Tx (PB10) alternate output push-pull
;;;5098         GPIOB->CRH   |=  (0x04UL  << 12);                     // USART3 Rx (PB11) input floating
;;;5099         if (__USART3_FLOWCTRL & 0x0300) {                     // HW flow control enabled
;;;5100           GPIOB->CRH   &= ~(0xFFUL  << 20);                   // Clear PB13, PB14
;;;5101           GPIOB->CRH   |=  (0x04UL  << 20);                   // USART3 CTS (PB13) input floating
;;;5102           GPIOB->CRH   |=  (0x0BUL  << 24);                   // USART3 RTS (PB14) alternate output push-pull
;;;5103         }
;;;5104       }
;;;5105       else if ((__USART3_REMAP & 0x30) == 0x10) {             // USART3 partial remap
;;;5106         RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                   // enable clock for Alternate Function
;;;5107         AFIO->MAPR   |= __USART3_REMAP;                       // set   USART3 remap
;;;5108         RCC->APB2ENR |=  RCC_APB2ENR_IOPCEN;                  // enable clock for GPIOC
;;;5109         GPIOC->CRH   &= ~(0xFFUL  <<  8);                     // Clear PC10, PC11
;;;5110         GPIOC->CRH   |=  (0x0BUL  <<  8);                     // USART3 Tx (PC10) alternate output push-pull
;;;5111         GPIOC->CRH   |=  (0x04UL  << 12);                     // USART3 Rx (PC11) input floating
;;;5112         if (__USART3_FLOWCTRL & 0x0300) {                     // HW flow control enabled
;;;5113           RCC->APB2ENR |=  RCC_APB2ENR_IOPBEN;                // enable clock for GPIOB
;;;5114           GPIOB->CRH   &= ~(0xFFUL  << 20);                   // Clear PB13, PB14
;;;5115           GPIOB->CRH   |=  (0x04UL  << 20);                   // USART3 CTS (PB13) input floating
;;;5116           GPIOB->CRH   |=  (0x0BUL  << 24);                   // USART3 RTS (PB14) alternate output push-pull
;;;5117         }
;;;5118       }
;;;5119       else {                                                  // USART3 full remap
;;;5120         RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                   // enable clock for Alternate Function
;;;5121         AFIO->MAPR   |= __USART3_REMAP;                       // set   USART3 remap
;;;5122         RCC->APB2ENR |=  RCC_APB2ENR_IOPDEN;                  // enable clock for GPIOD
;;;5123         GPIOD->CRH   &= ~(0xFFUL  <<  0);                     // Clear PD8, PD9
;;;5124         GPIOD->CRH   |=  (0x0BUL  <<  0);                     // USART3 Tx (PD8) alternate output push-pull
;;;5125         GPIOD->CRH   |=  (0x04UL  <<  4);                     // USART3 Rx (PD9) input floating
;;;5126         if (__USART3_FLOWCTRL & 0x0300) {                     // HW flow control enabled
;;;5127           GPIOD->CRH   &= ~(0xFFUL  << 12);                   // Clear PD11, PD12
;;;5128           GPIOD->CRH   |=  (0x04UL  << 12);                   // USART3 CTS (PD11) input floating
;;;5129           GPIOD->CRH   |=  (0x0BUL  << 16);                   // USART3 RTS (PD12) alternate output push-pull
;;;5130         }
;;;5131       } 
;;;5132   
;;;5133       RCC->APB1ENR |= RCC_APB1ENR_USART3EN;                   // enable clock for USART3
;;;5134   
;;;5135       USART3->BRR  = __USART_BRR(__PCLK1, __USART3_BAUDRATE); // set baudrate
;;;5136       USART3->CR1  = __USART3_DATABITS;                       // set Data bits
;;;5137       USART3->CR2  = __USART3_STOPBITS;                       // set Stop bits
;;;5138       USART3->CR1 |= __USART3_PARITY;                         // set Parity
;;;5139       USART3->CR3  = __USART3_FLOWCTRL;                       // Set Flow Control
;;;5140   
;;;5141       USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);           // RX, TX enable
;;;5142   
;;;5143       if (__USART_INTERRUPTS & 0x04) {                        // interrupts used
;;;5144         USART3->CR1 |= __USART3_CR1;
;;;5145         USART3->CR2 |= __USART3_CR2;
;;;5146         USART3->CR3 |= __USART3_CR3;
;;;5147         NVIC->ISER[1]  = (1 << (USART3_IRQn & 0x1F));   // enable interrupt
;;;5148       }
;;;5149   
;;;5150       USART3->CR1 |= USART_CR1_UE;                            // USART enable
;;;5151     } // end USART3 used
;;;5152   
;;;5153   
;;;5154   } // end of stm32_UsartSetup
00008c  4770              BX       lr
;;;5155   #endif
                          ENDP

00008e  0000              DCW      0x0000
                  |L4.144|
                          DCD      0x40021000
                  |L4.148|
                          DCD      0x40010000
                  |L4.152|
                          DCD      0x40010800
                  |L4.156|
                          DCD      0x40004408
